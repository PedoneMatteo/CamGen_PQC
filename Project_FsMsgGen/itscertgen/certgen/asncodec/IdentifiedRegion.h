/*
 * Generated by asn1c-0.9.29-DF (http://lionet.info/asn1c)
 * From ASN.1 module "Ieee1609Dot2BaseTypes"
 * 	found in "asn1/ieee1609.2/IEEE1609dot2BaseTypes.asn"
 * 	`asn1c -S ../../../../asn1c-fillabs2/skeletons -fcompound-names -no-gen-BER -no-gen-JER -no-gen-UPER -no-gen-APER -no-gen-random-fill -no-gen-example -pdu=EtsiTs103097Data -pdu=EnrolmentRequestMessage -pdu=EnrolmentResponseMessage -pdu=AuthorizationRequestMessage -pdu=AuthorizationRequestMessageWithPop -pdu=AuthorizationResponseMessage -pdu=CertificateRevocationListMessage -pdu=TlmCertificateTrustListMessage -pdu=RcaCertificateTrustListMessage -pdu=AuthorizationValidationRequestMessage -pdu=AuthorizationValidationResponseMessage -pdu=CaCertificateRequestMessage -pdu=EtsiTs103097Certificate`
 */


/* Including external dependencies */
#include "UnCountryId.h"
#include "CountryAndRegions.h"
#include "CountryAndSubregions.h"
#include <constr_CHOICE.h>
#ifndef	_IdentifiedRegion_H_
#define	_IdentifiedRegion_H_


#include <asn_application.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum IdentifiedRegion_PR {
	IdentifiedRegion_PR_NOTHING,	/* No components present */
	IdentifiedRegion_PR_countryOnly,
	IdentifiedRegion_PR_countryAndRegions,
	IdentifiedRegion_PR_countryAndSubregions
	/* Extensions may appear below */
	
} IdentifiedRegion_PR;

/* IdentifiedRegion */
typedef struct IdentifiedRegion {
	IdentifiedRegion_PR present;
	union IdentifiedRegion_u {
		UnCountryId_t	 countryOnly;
		CountryAndRegions_t	 countryAndRegions;
		CountryAndSubregions_t	 countryAndSubregions;
		/*
		 * This type is extensible,
		 * possible extensions are below.
		 */
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} IdentifiedRegion_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_IdentifiedRegion;
extern asn_CHOICE_specifics_t asn_SPC_IdentifiedRegion_specs_1;
extern asn_TYPE_member_t asn_MBR_IdentifiedRegion_1[3];

#ifdef __cplusplus
}
#endif

#endif	/* _IdentifiedRegion_H_ */
#include <asn_internal.h>
