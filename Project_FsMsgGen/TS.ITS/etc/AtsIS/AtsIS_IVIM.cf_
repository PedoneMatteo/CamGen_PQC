
[MODULE_PARAMETERS]
# This section shall contain the values of all parameters that are defined in your TTCN-3 modules.

# IUT Station ID
LibItsCommon_Pixits.PX_IUT_STATION_ID := 2533729309

LibItsGeoNetworking_Pixits.PX_GN_UPPER_LAYER := e_btpB
LibItsIvim_Pics.PICS_IS_IUT_SECURED := false

LibItsIvim_Pics.PICS_IVIM_HAS_GENERAL_CONTAINER  := true
LibItsIvim_Pics.PICS_IVIM_HAS_ROAD_CFG_CONTAINER := true
LibItsIvim_Pics.PICS_IVIM_HAS_LAYOUT_CONTAINER   := true
LibItsIvim_Pics.PICS_IVIM_HAS_TEXT_CONTAINER     := true

LibItsIvim_Pixits.PX_PROVIDER := {
                                  countryCode         := '0101110011'B  ,
                                  providerIdentifier  := 31
                                  }

[LOGGING]
# In this section you can specify the name of the log file and the classes of events
# you want to log into the file or display on console (standard error).

LogFile := "../logs/AtsIS/%e.%h-%r.%s"
FileMask := LOG_ALL | USER | DEBUG | MATCHING
ConsoleMask := LOG_ALL | USER | DEBUG | MATCHING
#FileMask := ERROR | USER | MATCHING | EXECUTOR_RUNTIME | VERDICTOP
#ConsoleMask := ERROR | USER | MATCHING | EXECUTOR_RUNTIME | VERDICTOP
LogSourceInfo := Stack
LogEntityName:= Yes
LogEventTypes:= Yes
#TimeStampFormat := DateTime

[TESTPORT_PARAMETERS]
# In this section you can specify parameters that are passed to Test Ports.
# IVIM Layer
#   next_header     : btpA|btpB (overwrite BTP.type)
#   header_type     : tsb|gbc|uni
#   header_sub_type : sh (single hop)
# IVIM Layer
#   next_header     : btpA|btpB (overwrite BTP.type)
# BTP Layer
#   type            : btpA|btpB
#   destination port: dst_port
#   source port     : src_port
#   device_mode     : Set to 1 if the layer shall encapsulate upper layer PDU
#   device_mode     : Set to 1 if the layer shall encapsulate upper layer PDU
# GN Layer
#   ll_address             : GeoNetworking address of the Test System
#   latitude               : latitude of the Test System
#   longitude              : longitude of the Test System
#   beaconing              : Set to 1 if GnLayer shall start beaconing
#   Beaconning timer expiry: expiry (ms)
#   device_mode            : Set to 1 if the layer shall encapsulate upper layer PDU
#   secured_mode           : Set to 1 if message exchanges shall be signed
#   encrypted_mode         : Set to 1 if message exchanges shall be encrypted
#                            NOTE: For signed & encrypted message exchanges, both secured_mode and encrypted_mode shall be set to 1
#   secure_db_path         : Path to the certificates and keys storage location
#   hash                   : Hash algorithm to be used when secured mode is set
#                            Authorized values are SHA-256 or SHA-384
#                            Default: SHA-256
#   cypher                 : Cyphering algorithm to be used when secured mode is set
#                            Authorized values are NISTP-256 and BP-256
#                            Default: NISTP-256
# Ethernet layer
#   mac_src  :Source MAC address
#   mac_bc   :Broadcast address
#   eth_type : Ethernet type
# Commsignia layer
#   mac_src     : Device MAC address, used to discard packets
#                 To indicate no filering, use the value 000000000000
#   mac_bc      : Broadcast address
#   eth_type    : Ethernet type, used to discard packets
#   target_host : Device address
#   target_port : Device port
#   source_port : Test System port
#   interface_id: Interface id, used to discard packets
#   tx_power    : TX power (dB)
# UDP layer (IP/UDP based on Pcap)
#   dst_ip  : destination IPv4 address (aa.bb.cc.dd)
#   dst_port: destination port
#   src_ip  : source IPv4 address (aa.bb.cc.dd)
#   src_port: source port
# Pcap layer
#   mac_src    : Source MAC address, used to exclude from capture the acket sent by the Test System
#   filter     : Pcap filter (compliant with tcpdump syntax) 
#   Online mode:
#     nic: Local NIC
#          If set, online mode is used
#   Offline mode (nic is present but not set):
#     file        : File to read
#     frame_offset: Frame offset, used to skip packets with frame number < frame_offset
#     time_offset : Time offset, used to skip packets with time offset < time_offset
#     save_mode   : 1 to save sent packet, 0 otherwise

#Cygwin
#system.ivimPort.params := "IVIM(next_header=btpB,header_type=uni)/BTP(dst_port=2006)/GN(ll_address=4C5E0C14D2EA,latitude=43551050,longitude=10298730,distanceA=1500,distanceB=1500,angle=0,device_mode=1,secured_mode=0,sec_db_path=/home/yanng/tmp/certificates)/ETH(mac_src=e2b7b30429eb)/PCAP(mac_src=e2b7b30429eb,nic=CEBB111F-D749-4B40-8B4D-DBB060E90987,filter=and ether proto 0x8947)"
# Linux
#system.ivimPort.params := "IVIM(next_header=btpB,header_type=gbc)/BTP(dst_port=2006)/GN(ll_address=4C5E0C14D2EA,latitude=43551050,longitude=10298730,distanceA=1500,distanceB=1500,angle=0,device_mode=1,secured_mode=0,sec_db_path=../data/certificates/certificates)/ETH(mac_src=dc536045af7f)/PCAP(mac_src=dc536045af7f,nic=wlp2s0,filter=and ether proto 0x8947)"
system.ivimPort.params := "IVIM(next_header=btpB,header_type=gbc)/BTP(dst_port=2006)/GN(ll_address=4C5E0C14D2EA,latitude=43551050,longitude=10298730,distanceA=1500,distanceB=1500,angle=0,device_mode=1,secured_mode=0,sec_db_path=../data/certificates/certificates)/ETH(mac_src=dc536045af7e)/PCAP(mac_src=dc536045af7e,nic=wlp0s20f3,filter=and ether proto 0x8947)"
# Linux over UDP
#system.ivimPort.params := "IVIM(next_header=btpB,header_type=gbc)/BTP(dst_port=2006)/GN(ll_address=4C5E0C14D2EA,latitude=43551050,longitude=10298730,distanceA=1500,distanceB=1500,angle=0,device_mode=1,secured_mode=0,sec_db_path=../data/certificates/certificates)/ETH(mac_src=dc536045af7f)/UDP(dst_ip=192.168.146.26,src_port=4041,dst_port=50544)"

# IVIM UpperTester port based on UDP
system.utPort.params := "UT_IVIM/UDP(dst_ip=127.0.0.1,dst_port=12345,src_port=12346)"
#system.utPort.params := "UT_IVIM/UDP(dst_ip=192.168.146.26,dst_port=44100,src_port=12345)"
#system.utPort.params := "UT_IVIM/UDP(dst_ip=172.16.35.1)"

[EXECUTE]
# Check that protocolVersion is set to 1 and messageID is set to 6
#ItsIvim_TestCases.TC_IS_IVI_GEN_MSGF_BV_01
# Check that all Application Containers references existing items in one or more Location Containers
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_01
# Check that application container information of the same type does not refer to overlapping RZs.
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_02
# Check that all definitions of zones that are based on the same Reference Position, be it that they are connected or not interconnected, should be included in the same Geographic Location Container
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_03
# Check that the IUT includes the component laneNumber for each zone if the zone definition is restricted to specific lane(s).
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_04
# Check that If the zone definition applies to the entire carriageway (all lanes), the
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_05
# Check that IUT includes, for each zone, one or more of the following optional components to define the zone: 
#ItsIvim_TestCases.TC_IS_IVI_GEN_LOC_BV_06
# Check that management container contains a country code according to ISO 3166-1. Numbers shall be assigned on national basis.
#ItsIvim_TestCases.TC_IS_IVI_GEN_MANC_BV_01
# Check that an IUT can split an IVI Structure to multiple messages if it exceeds the maximum PDU size.
#ItsIvim_TestCases.TC_IS_IVI_GEN_MANC_BV_02
# Check that IVI Service generates a new IVIM on reception of a valid AppIVIM_Trigger request
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVGN_BV_01
# Check that a new iviIdentificationNumber value is assigned for each newly generated IVIM
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVGN_BV_02
# Check that iviIdentificationNumber value is set to a next unused value each time an IVIM is detected
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVGN_BV_03
# Check that a new generated IVIM contains an iviStatus set to 'new'
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVGN_BV_04
# Check that the timeStamp is set to the current time when generating a new IVM
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVGN_BV_05
# Check that an updated IVIM contains an iviStatus set to 'update'
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVUP_BV_01
# Check that an update can change the validity time to the IVIM - validTo information field
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVUP_BV_02
# Check that an update can change the validity time to the IVIM - validFrom information field
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVUP_BV_03
# Check that the timeStamp is set to the current time when generating an update with some change of information content
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVUP_BV_04
# Check that the iviIdentificationNumber remains unchanged IVIM is updated
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVUP_BV_05
# The IUT shall, at minimum, include the identifier(s) of a Relevance Zone in the component 
#ItsIvim_TestCases.TC_IS_IVI_GEN_GENAPP_BV_01
# Check that all zone IDs in the General Application Container references existing items in 
#ItsIvim_TestCases.TC_IS_IVI_GEN_GENAPP_BV_02
# The IUT shall include the component direction to describe the direction of relevance 
#ItsIvim_TestCases.TC_IS_IVI_GEN_GENAPP_BV_03
# The IUT shall include at least one element in the roadSignCodes container.
#ItsIvim_TestCases.TC_IS_IVI_GEN_GENAPP_BV_04
# Check that all layoutID of the General Application Containers references existing layouts 
#ItsIvim_TestCases.TC_IS_IVI_GEN_GENAPP_BV_05
# Check that all zone IDs in the Road Configuration Container references existing items in the Location Container of the same IVIM Structure.
#ItsIvim_TestCases.TC_IS_IVI_GEN_RCC_BV_01
# Check that all Parts that relate to the same Location Container are included in the same Road Configuration Container.
#ItsIvim_TestCases.TC_IS_IVI_GEN_RCC_BV_02
# Check that Road Configuration Container contains description of all present lanes. 
#ItsIvim_TestCases.TC_IS_IVI_GEN_RCC_BV_03
# Check that all zone IDs in the Text Container references existing items in the Location Container of the same IVIM Structure.
#ItsIvim_TestCases.TC_IS_IVI_GEN_TEXT_BV_01
# The sending ITS-S shall include the component direction to describe the direction of 
#ItsIvim_TestCases.TC_IS_IVI_GEN_TEXT_BV_02
# The IUT can include either the component text and/or the component data. The IUT can repeat 
#ItsIvim_TestCases.TC_IS_IVI_GEN_TEXT_BV_03
# Check that all layoutID of the Text Containers references existing layouts in the Layout Containers of the same IVIM Structure.
#ItsIvim_TestCases.TC_IS_IVI_GEN_TEXT_BV_04
# Check that IVIMs are not generated more frequently than T_GenIvimMin
#ItsIvim_TestCases.TC_IS_IVI_GEN_GFQ_TI_01
# Check that IVIMs are not generated less frequently than T_GenIvimMax
#ItsIvim_TestCases.TC_IS_IVI_GEN_GFQ_TI_02
# Check that the IUT activates repetition on reception of a valid AppIVIM_Update request
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVRP_BV_01
# Check that the IUT activates repetition on reception of a valid AppIVIM_Update request
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVRP_BV_02
# Check that the IUT terminates IVM genration on validity duration expery
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVTR_BV_01
# Check that the IUT terminates IVM genration on termination request
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVTR_BV_02
# Check that the IUT terminates IVM generation on cancellation request.
ItsIvim_TestCases.TC_IS_IVI_GEN_EVTR_BV_03
# Check that the IUT terminates IVM generation on negation request 
#ItsIvim_TestCases.TC_IS_IVI_GEN_EVTR_BV_04
# Check that IVIM uses BTP_B packet
#ItsIvim_TestCases.TC_IS_IVI_GEN_COM_BV_01
# Check that IVI service encapsulates IVIM in a UNC with the HeaderType field set to the value of 2.
#ItsIvim_TestCases.TC_IS_IVI_GEN_COM_BV_02
# Check that IVI service uses certificate containing valid ITS AID to sign IVIM.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SEC_BV_01
# Check that IVI service uses certificate containing valid ITS AID to sign IVIM.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SEC_BV_02
# Check that IVI service uses certificate containing valid Service Specific Permissions of type BitmapSsp 
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_01
# Check that IVI service sends an IVIM containing different road signs schema when it is permitted by the signing certificate 
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_02
# Check that IVI service sends an IVIM containing ISO/TS 14823 road signs codes of different service categories 
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_03
# Check that IVI service sends an IVIM containing lane status when it is permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_04
# Check that IVI service sends an IVIM containing different containers when it is permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_05
# Check that IVI service sends an IVI negation when it is permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BV_06
# Check that IVI service doesn’t send an IVIM if service provider value is not authorized by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_01
# Check that IVI service doesn’t send an IVIM containing different road signs schema when it is not permitted by the signing certificat.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_02
# Check that IVI service doesn’t send an IVIM containing ISO/TS 14823 road signs codes of different service categories when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_03
# Check that IVI service doesn’t send an IVIM containing lane status when it is not permitted by the signing certificate 
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_04
# Check that IVI service doesn’t send an IVIM containing different containers when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_05
# Check that IVI service doesn’t send an IVI negation when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_GEN_SSP_BO_06
# Check that the IUT can successfully process IVIM been received when the IUT was in the Relevance Zone.
#ItsIvim_TestCases.TC_IS_IVI_RCV_MSGF_BV_01
# Check that the IUT can successfully process IVIM been received when the IUT was in the Detection Zone approaching the Relevance Zone
#ItsIvim_TestCases.TC_IS_IVI_RCV_DATA_BV_01
# Check that an IUT detects the applicability of a Relevance Zone defined as a polygonal lie.
#ItsIvim_TestCases.TC_IS_IVI_RCV_DATA_BV_02
# Check that an IUT detects the applicability of a Relevance Zone defined as an area.
#ItsIvim_TestCases.TC_IS_IVI_RCV_DATA_BV_03
# Check that an IUT detects the applicability of a Relevance Zone defined as a distance value.
#ItsIvim_TestCases.TC_IS_IVI_RCV_DATA_BV_04
# Check that an IUT detects the applicability of a Relevance Zone by matching its path with the relevance zone (path) of the moving IVI object.
#ItsIvim_TestCases.TC_IS_IVI_RCV_DATA_BV_05
# Check that a received IVIM is considered as new if iviStatus is “new”.
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_01
# Check that a received IVIM is considered as new if iviStatus is “new” and/or if the combination of serviceProviderId and iviIdentificationNumber is different from other received messages
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_02
# Check that a received IVIM is considered as update if the iviStatus is “update” and/or if the combination of serviceProviderId and iviIdentificationNumber equals to those from another received structure and the timestamp is more recent
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_03
# Check that a received IVIM is considered as duplicate of a received structure if the combination of serviceProviderId and iviIdentificationNumber equals to those from another received structure and the timestamp is the same;
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_04
# Check that a received IVIM is considered as cancelation if the iviStatus is “cancellation”.
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_05
# Check that a received IVIM is considered as negation if the iviStatus is “negation”.
#ItsIvim_TestCases.TC_IS_IVI_RCV_EVUP_BV_06
# Check that the IUT accepts a received IVIM message permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BV_01
# Check that the IUT skips a received IVIM message not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_01
# Check that the IUT skips a received IVIM message with service provider identifier not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_02
# Check that IVI service skips a received IVIM containing different road signs schema when it is not permitted by the signing certificate 
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_03
# Check that IVI service skips a received IVIM containing ISO/TS 14823 road signs codes of different service categories when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_04
# Check that IVI service skips a received IVIM containing lane status when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_05
# Check that IVI service skips a received IVIM containing different containers when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_06
# Check that IVI service skips a received IVI negation when it is not permitted by the signing certificate.
#ItsIvim_TestCases.TC_IS_IVI_RCV_SSP_BO_07
# Check that the IUT can successfully process IVIM been received when the IUT was in the Relevance Zone
#ItsIvim_TestCases.TC_IS_IVI_RCV_MSGF_BV_01

[MAIN_CONTROLLER]
# The options herein control the behavior of MC.
KillTimer := 10.0
LocalAddress := 127.0.0.1
TCPPort := 12000
NumHCs := 1
